---
name: prefer-early-returns
description: AI generates deeply nested if-else chains instead of early return patterns
category: universal
severity: warning
---

# Prefer Early Returns

## 🎯 Rule Purpose

**Eliminates deeply nested if-else chains by enforcing early return patterns.**

This rule detects "pyramid of doom" nested conditions and forces the use of guard clauses and early returns for cleaner, more readable code.

## 🚫 AI Limitation Resolved

**Problem**: AI creates deeply nested if-else chains because:
- Training data shows "check everything first" patterns
- Nested conditions seem logical in isolation
- Happy path logic gets buried deep inside
- Error handling is mixed with business logic

**Solution**: This state machine detects nesting patterns and enforces guard clause patterns.

## ⚡ How It Works

1. **Detection**: Scans for nested if-else chains deeper than 2 levels
2. **Analysis**: Evaluates if early returns can flatten the structure
3. **Constraint**: Forces guard clause patterns with early returns
4. **Validation**: Ensures maximum nesting depth and clear flow

## 💡 Key Constraints Applied

- **Max Nesting**: 2 levels maximum for any function
- **Guard Clauses**: Error conditions first with early returns
- **Happy Path Last**: Main logic at top level, not buried
- **Fail Fast**: Validate inputs immediately
- **Clear Flow**: Obvious error conditions and success path

## 🎯 Expected Results

After applying this rule, your AI will generate:
- ✅ Guard clauses for input validation
- ✅ Early returns for error conditions  
- ✅ Happy path logic at top level
- ✅ Maximum 2 levels of nesting
- ✅ Clear, readable function flow
- ❌ No pyramid of doom structures
- ❌ No deeply buried logic
- ❌ No complex nested conditions