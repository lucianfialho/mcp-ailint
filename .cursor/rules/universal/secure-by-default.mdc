---
name: secure-by-default
description: AI generates insecure code patterns instead of security-first implementations
category: universal
severity: warning
---

# Secure By Default

## 🎯 Rule Purpose

**Prevents AI from generating vulnerable code by enforcing security-first patterns.**

This rule detects common security anti-patterns and forces secure alternatives, protecting against OWASP Top 10 vulnerabilities.

## 🚫 AI Limitation Resolved

**Problem**: AI generates insecure code because:
- Training data contains vulnerable examples
- Security is often an afterthought in code samples
- AI doesn't understand attack vectors
- Quick solutions are often insecure

**Solution**: This state machine detects security risks and enforces secure patterns.

## ⚡ How It Works

1. **Detection**: Scans for SQL injection, weak crypto, missing validation
2. **Analysis**: Evaluates security context and attack vectors
3. **Constraint**: Forces secure alternatives (parameterized queries, bcrypt)
4. **Validation**: Ensures no known vulnerability patterns remain

## 🔒 Key Security Constraints

- **SQL Injection**: Force parameterized queries, never string concatenation
- **Strong Crypto**: Enforce bcrypt/scrypt/argon2, block MD5/SHA1
- **Input Validation**: Require validation for all user input
- **Secure Defaults**: Safe patterns by default, not afterthoughts

## 🎯 Expected Results

After applying this rule, your AI will generate:
- ✅ Parameterized database queries (SQL injection proof)
- ✅ Strong password hashing with bcrypt/scrypt/argon2
- ✅ Input validation and sanitization
- ✅ Secure authentication patterns
- ❌ No SQL injection vulnerabilities
- ❌ No weak cryptographic functions
- ❌ No unvalidated user input