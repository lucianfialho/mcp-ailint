---
name: promise-patterns
description: AI generates blocking/callback code instead of modern asynchronous patterns
category: universal
severity: warning
---

# Promise Patterns

## 🎯 Rule Purpose

**Eliminates blocking operations by enforcing concurrent asynchronous patterns.**

This rule detects blocking/sequential code and forces modern async patterns with proper concurrency and error handling.

## 🚫 AI Limitation Resolved

**Problem**: AI generates blocking code because:
- Sequential examples are simpler in training data
- Blocking operations appear straightforward
- Concurrency concepts are complex
- Error handling is often omitted

**Solution**: This state machine detects blocking patterns and enforces async concurrency.

## ⚡ How It Works

1. **Detection**: Scans for blocking operations and sequential calls
2. **Analysis**: Identifies opportunities for concurrent execution
3. **Constraint**: Forces async patterns and concurrent execution
4. **Validation**: Ensures non-blocking, performant code

## 💡 Key Constraints Applied

- **No Blocking**: Replace sleep/blocking calls with async patterns
- **Concurrent Execution**: Run independent operations simultaneously
- **Proper Error Handling**: Handle partial failures gracefully
- **Performance First**: Optimize for throughput and responsiveness
- **Resource Efficiency**: Use connection pooling and session reuse

## 🎯 Expected Results

After applying this rule, your AI will generate:
- ✅ Concurrent execution of independent operations
- ✅ Non-blocking async patterns
- ✅ Proper error handling in async contexts
- ✅ 5x+ performance improvements
- ❌ No blocking sleep/wait operations
- ❌ No sequential execution of independent tasks